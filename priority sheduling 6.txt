#include <stdio.h>

struct Process {
    int processID;
    int priority;
    int burstTime;
    int remainingTime;
};

void swap(struct Process *xp, struct Process *yp) {
    struct Process temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sortProcessesByPriority(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

void executeProcesses(struct Process processes[], int n) {
    int currentTime = 0;

    printf("\nGantt Chart:\n");

    while (1) {
        int selectedProcess = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0 && processes[i].burstTime > 0) {
                if (selectedProcess == -1 || processes[i].priority < processes[selectedProcess].priority) {
                    selectedProcess = i;
                }
            }
        }

        if (selectedProcess == -1) {
            break;  // No remaining processes
        }

        printf("| P%d ", processes[selectedProcess].processID);
        processes[selectedProcess].burstTime--;
        processes[selectedProcess].remainingTime--;

        currentTime++;

        if (processes[selectedProcess].burstTime == 0) {
            printf("|");
        }
    }

    printf("\n\n");
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        printf("Enter priority for Process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
    }

    sortProcessesByPriority(processes, n);

    printf("\nProcesses sorted by priority:\n");
    printf("Process ID\tPriority\tBurst Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\n", processes[i].processID, processes[i].priority, processes[i].burstTime);
    }

    executeProcesses(processes, n);

    return 0;
}
