#include <stdio.h>

#define MEMORY_SIZE 1000

// Structure to represent a memory block
struct MemoryBlock {
    int size;
    int allocated;
};

// Function prototypes
void initializeMemory(struct MemoryBlock memory[], int size);
int worstFit(struct MemoryBlock memory[], int numBlocks, int processSize);
void displayMemory(struct MemoryBlock memory[], int numBlocks);

int main() {
    int numBlocks, processSize;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &numBlocks);

    struct MemoryBlock memory[numBlocks];

    initializeMemory(memory, numBlocks);

    printf("Enter the size of the process: ");
    scanf("%d", &processSize);

    int allocatedBlockIndex = worstFit(memory, numBlocks, processSize);

    if (allocatedBlockIndex != -1) {
        printf("Process allocated to memory block %d\n", allocatedBlockIndex + 1);
        displayMemory(memory, numBlocks);
    } else {
        printf("Memory allocation failed for the process.\n");
    }

    return 0;
}

// Initialize memory blocks
void initializeMemory(struct MemoryBlock memory[], int numBlocks) {
    for (int i = 0; i < numBlocks; ++i) {
        printf("Enter the size of memory block %d: ", i + 1);
        scanf("%d", &memory[i].size);
        memory[i].allocated = 0; // 0 represents unallocated
    }
}

// Worst Fit algorithm
int worstFit(struct MemoryBlock memory[], int numBlocks, int processSize) {
    int worstFitIndex = -1;
    int worstFitSize = -1;

    for (int i = 0; i < numBlocks; ++i) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            if (worstFitSize == -1 || memory[i].size > worstFitSize) {
                worstFitIndex = i;
                worstFitSize = memory[i].size;
            }
        }
    }

    if (worstFitIndex != -1) {
        memory[worstFitIndex].allocated = 1;
    }

    return worstFitIndex;
}

// Display memory status
void displayMemory(struct MemoryBlock memory[], int numBlocks) {
    printf("\nMemory Status:\n");
    for (int i = 0; i < numBlocks; ++i) {
        printf("Block %d: Size = %d, Allocated = %s\n", i + 1, memory[i].size,
               memory[i].allocated ? "Yes" : "No");
    }
}
