#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5  // Number of philosophers

pthread_t philosophers[N];
sem_t forks[N];

void *philosopher(void *arg) {
    int philosopher_id = *(int *)arg;
    int left_fork = philosopher_id;
    int right_fork = (philosopher_id + 1) % N;

    while (1) {
        // Thinking
        printf("Philosopher %d is thinking.\n", philosopher_id);
        sleep(1);

        // Pick up left fork
        sem_wait(&forks[left_fork]);
        printf("Philosopher %d picked up left fork %d.\n", philosopher_id, left_fork);
        sleep(1);

        // Pick up right fork
        sem_wait(&forks[right_fork]);
        printf("Philosopher %d picked up right fork %d.\n", philosopher_id, right_fork);
        sleep(1);

        // Eating
        printf("Philosopher %d is eating.\n", philosopher_id);
        sleep(2);

        // Put down right fork
        sem_post(&forks[right_fork]);
        printf("Philosopher %d put down right fork %d.\n", philosopher_id, right_fork);

        // Put down left fork
        sem_post(&forks[left_fork]);
        printf("Philosopher %d put down left fork %d.\n", philosopher_id, left_fork);
    }
}

int main() {
    int i;
    int ids[N];

    // Initialize semaphores for forks
    for (i = 0; i < N; i++) {
        sem_init(&forks[i], 0, 1);
    }

    // Create philosopher threads
    for (i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Join philosopher threads
    for (i = 0; i < N; i++) {
        pthread_join(philosophers[i], NULL);
    }

    return 0;
}
