#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 3
#define NUM_WRITERS 2

sem_t mutex, writeLock;
int readersCount = 0;

void *reader(void *arg) {
    int readerId = *((int *)arg);

    while (1) {
        sleep(1); // Simulating reading time

        sem_wait(&mutex);
        readersCount++;

        if (readersCount == 1) {
            sem_wait(&writeLock); // First reader locks writers out
        }

        sem_post(&mutex);

        // Reading (critical section for readers)
        printf("Reader %d is reading...\n", readerId);

        sem_wait(&mutex);
        readersCount--;

        if (readersCount == 0) {
            sem_post(&writeLock); // Last reader releases the write lock
        }

        sem_post(&mutex);
    }
}

void *writer(void *arg) {
    int writerId = *((int *)arg);

    while (1) {
        sleep(2); // Simulating writing time

        sem_wait(&writeLock);

        // Writing (critical section for writers)
        printf("Writer %d is writing...\n", writerId);

        sem_post(&writeLock);
    }
}

int main() {
    pthread_t readerThreads[NUM_READERS], writerThreads[NUM_WRITERS];
    int readerIds[NUM_READERS], writerIds[NUM_WRITERS];

    sem_init(&mutex, 0, 1);
    sem_init(&writeLock, 0, 1);

    // Create reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        readerIds[i] = i + 1;
        pthread_create(&readerThreads[i], NULL, reader, (void *)&readerIds[i]);
    }

    // Create writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        writerIds[i] = i + 1;
        pthread_create(&writerThreads[i], NULL, writer, (void *)&writerIds[i]);
    }

    // Wait for threads to finish (will never happen in this example)
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(readerThreads[i], NULL);
    }
    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writerThreads[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&writeLock);

    return 0;
}
