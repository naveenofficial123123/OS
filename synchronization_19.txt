#include <stdio.h>
#include <pthread.h>

#define NUM_THREADS 3

pthread_mutex_t mutex;

void *printMessage(void *threadId) {
    long tid = (long)threadId;

    pthread_mutex_lock(&mutex); // Acquire the mutex lock

    // Critical section (protected by the mutex)
    printf("Thread #%ld: Hello from the critical section!\n", tid);

    pthread_mutex_unlock(&mutex); // Release the mutex lock

    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    pthread_mutex_init(&mutex, NULL); // Initialize the mutex

    // Create threads
    for (long i = 0; i < NUM_THREADS; i++) {
        int result = pthread_create(&threads[i], NULL, printMessage, (void *)i);
        if (result) {
            fprintf(stderr, "Error creating thread #%ld\n", i);
            return -1;
        }
    }

    // Wait for threads to finish
    for (long i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    pthread_mutex_destroy(&mutex); // Destroy the mutex

    return 0;
}
