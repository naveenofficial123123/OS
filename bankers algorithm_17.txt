#include <stdio.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int available[MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];

void initialize() {
    // Initialize available resources
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        printf("Enter the total number of instances for resource %d: ", i + 1);
        scanf("%d", &available[i]);
    }

    // Initialize maximum resources each process can claim
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        printf("Enter the maximum resources for process %d:\n", i + 1);
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            scanf("%d", &max[i][j]);
            need[i][j] = max[i][j];
        }
    }
}

int requestResources(int process, int request[]) {
    // Check if the request is within the available resources
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        if (request[i] > available[i]) {
            printf("Not enough resources available for process %d\n", process + 1);
            return 0; // Request denied
        }
    }

    // Check if the request satisfies the need constraint
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        if (request[i] > need[process][i]) {
            printf("Process %d's request exceeds its maximum claim\n", process + 1);
            return 0; // Request denied
        }
    }

    // Simulate resource allocation
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        available[i] -= request[i];
        allocation[process][i] += request[i];
        need[process][i] -= request[i];
    }

    return 1; // Request granted
}

void releaseResources(int process, int release[]) {
    // Simulate resource release
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        available[i] += release[i];
        allocation[process][i] -= release[i];
        need[process][i] += release[i];
    }
}

int main() {
    initialize();

    int process, request[MAX_RESOURCES];

    // Simulate resource request
    printf("Enter the process making the request (1 to %d): ", MAX_PROCESSES);
    scanf("%d", &process);
    printf("Enter the resource request for process %d:\n", process);
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        scanf("%d", &request[i]);
    }

    if (requestResources(process - 1, request)) {
        printf("Request granted. Available resources after allocation:\n");
        for (int i = 0; i < MAX_RESOURCES; ++i) {
            printf("%d ", available[i]);
        }
        printf("\n");

        // Simulate resource release after some processing
        int release[MAX_RESOURCES] = {1, 2, 3}; // Adjust as needed
        releaseResources(process - 1, release);

        printf("Resources released. Available resources after release:\n");
        for (int i = 0; i < MAX_RESOURCES; ++i) {
            printf("%d ", available[i]);
        }
        printf("\n");
    }

    return 0;
}
